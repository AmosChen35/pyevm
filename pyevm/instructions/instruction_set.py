from pyevm.instructions.block_info import *
from pyevm.instructions.comparison_bitwise import *
from pyevm.instructions.environmental import *
from pyevm.instructions.push_dup_swap_log import *
from pyevm.instructions.sha_op import *
from pyevm.instructions.stack_memory_storage_flow import *
from pyevm.instructions.stop_arithmetic import *

instruction_set = {
    0x00: Stop(),
    0x01: Add(),
    0x02: Mul(),
    0x03: Sub(),
    0x04: Div(),
    0x05: SDiv(),
    0x06: Mod(),
    0x07: SMod(),
    0x08: AddMod(),
    0x09: MulMod(),
    0x0a: Exp(),
    0x0b: SignExtend(),
    0x10: Lt(),
    0x11: Gt(),
    0x12: Slt(),
    0x13: Sgt(),
    0x14: Eq(),
    0x15: IsZero(),
    0x16: And(),
    0x17: Or(),
    0x18: Xor(),
    0x19: Not(),
    0x1a: Byte(),
    0x20: Sha3(),
    0x30: Address(),
    0x31: Balance(),
    0x32: Origin(),
    0x33: Caller(),
    0x34: CallValue(),
    0x35: CallDataLoad(),
    0x36: CallDataSize(),
    0x37: CallDataCopy(),
    0x38: CodeSize(),
    0x39: CodeCopy(),
    0x3a: GasPrice(),
    0x3b: ExtCodeSize(),
    0x3c: ExtCodeCopy(),
    0x3d: ReturnDataSize(),
    0x3e: ReturnDataCopy(),
    0x40: BlockHash(),
    0x41: CoinBase(),
    0x42: TimeStamp(),
    0x43: Number(),
    0x44: Difficulty(),
    0x45: GasLimit(),
    0x50: Pop(),
    0x51: MLoad(),
    0x52: MStore(),
    0x53: MStore8(),
    0x54: SLoad(),
    0x55: SStore(),
    0x56: Jump(),
    0x57: JumpI(),
    0x58: Pc(),
    0x59: MSize(),
    0x5a: Gas(),
    0x5b: JumpDest(),
    0x60: Push(1),
    0x61: Push(2),
    0x62: Push(3),
    0x63: Push(4),
    0x64: Push(5),
    0x65: Push(6),
    0x66: Push(7),
    0x67: Push(8),
    0x68: Push(9),
    0x69: Push(10),
    0x6a: Push(11),
    0x6b: Push(12),
    0x6c: Push(13),
    0x6d: Push(14),
    0x6e: Push(15),
    0x6f: Push(16),
    0x70: Push(17),
    0x71: Push(18),
    0x72: Push(19),
    0x73: Push(20),
    0x74: Push(21),
    0x75: Push(22),
    0x76: Push(23),
    0x77: Push(24),
    0x78: Push(25),
    0x79: Push(26),
    0x7a: Push(27),
    0x7b: Push(28),
    0x7c: Push(29),
    0x7d: Push(30),
    0x7e: Push(31),
    0x7f: Push(32),
    0x80: Dup(1),
    0x81: Dup(2),
    0x82: Dup(3),
    0x83: Dup(4),
    0x84: Dup(5),
    0x85: Dup(6),
    0x86: Dup(7),
    0x87: Dup(8),
    0x88: Dup(9),
    0x89: Dup(10),
    0x8a: Dup(11),
    0x8b: Dup(12),
    0x8c: Dup(13),
    0x8d: Dup(14),
    0x8e: Dup(15),
    0x8f: Dup(16),
    0x90: Swap(1),
    0x91: Swap(2),
    0x92: Swap(3),
    0x93: Swap(4),
    0x94: Swap(5),
    0x95: Swap(6),
    0x96: Swap(7),
    0x97: Swap(8),
    0x98: Swap(9),
    0x99: Swap(10),
    0x9a: Swap(11),
    0x9b: Swap(12),
    0x9c: Swap(13),
    0x9d: Swap(14),
    0x9e: Swap(15),
    0x9f: Swap(16),
    0xa0: Log(0),
    0xa1: Log(1),
    0xa2: Log(2),
    0xa3: Log(3),
    0xa4: Log(4)
}
